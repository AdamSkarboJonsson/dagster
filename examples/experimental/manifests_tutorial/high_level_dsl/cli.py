import json
from pathlib import Path
from typing import Optional

import click

# references to internal
from dagster_yaml.cli import register_vscode_plugin  # type: ignore
from dagster_yaml.yaml.pydantic_yaml import parse  # type: ignore

# TODO drive this from the top-level builder object
from manifest import HighLevelDSLManifest


@click.command()
def schema() -> None:
    from manifest import HighLevelDSLManifest

    print(json.dumps(HighLevelDSLManifest.schema(), indent=2))  # noqa: T201


@click.command()
@click.argument("file")
def validate(file: str):
    # file_path = Path(file)
    src = Path(file).read_text()
    pydantic_obj = parse(cls=HighLevelDSLManifest, src=src, filename=str(Path(file).resolve()))
    print(f"pydantic_obj: {pydantic_obj}")  # noqa: T201
    # load_definitions_from_yaml(file, plugin)


@click.command()
@click.option(
    "--extension",
    type=click.STRING,
    help="File extension to register",
    default=".high_level.yaml",
)
@click.option(
    "--project",
    type=click.STRING,
    help="Path to the vscode project. Must be in a git repo.",
    default=".",
)
@click.option(
    "--schema",
    type=click.STRING,
    help="Path save the JSON schema. Must be in the same git repo as --project.",
    default=".dagster.autogenerated.schema.json",
)
def configure_vscode(
    extension: Optional[str],
    project: Optional[str],
    schema: Optional[str],
) -> None:
    # hardcode
    project_path = Path(__file__) / Path("../../../../../.vscode")
    json_schema = HighLevelDSLManifest.schema()
    register_vscode_plugin(
        extension=extension,
        project=str(project_path.resolve()),
        schema=schema,
        json_schema=json_schema,
    )


@click.group()
def cli() -> None:
    pass


cli.add_command(schema)
cli.add_command(validate)
cli.add_command(configure_vscode)


if __name__ == "__main__":
    cli()
